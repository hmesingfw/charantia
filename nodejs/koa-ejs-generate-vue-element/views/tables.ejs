<!DOCTYPE html>
<html>
<%include include/head.ejs%>
<style>
    .box-card {
        margin: 10px 0;
    }
</style>

<body>
    <div id="app" v-cloak>
        <el-tabs type="border-card" v-model="activeName" @tab-click="onChangeTab">

            <el-tab-pane name="list">
                <span slot="label"><i class="el-icon-date"></i>列表</span>
                <el-form :inline="true" :model="QueryParam" class="demo-form-inline" size="mini">
                    <el-form-item label="表单名称">
                        <el-input v-model="QueryParam.title" placeholder="表单名称"></el-input>
                    </el-form-item>
                    <el-form-item>
                        <el-button @click="tableQuery(1)" icon="el-icon-search"></el-button>
                        <el-button type="primary" @click="onAdd()" icon="el-icon-edit"></el-button>
                        <el-button type="danger" @click="onMultipleSelectionDel()" icon="el-icon-delete"></el-button>
                    </el-form-item>
                </el-form>
                <el-table :data="tableData" border style="width: 100%" size="mini" @selection-change="handleSelectionChange">
                    <el-table-column type="selection" width="42"></el-table-column>
                    <el-table-column prop="title" label="表单名称" show-overflow-tooltip></el-table-column>
                    <el-table-column prop="isCdn" label="是否CDN模式" show-overflow-tooltip>
                        <template slot-scope="scope">{{scope.row.isCdn == '0' ? '是' : '否'}}</template>
                    </el-table-column>
                    <el-table-column prop="remarks" label="备注" show-overflow-tooltip></el-table-column>
                    <el-table-column prop="createdAt" label="创建时间" show-overflow-tooltip></el-table-column>
                    <el-table-column prop="updatedAt" label="更新时间" show-overflow-tooltip></el-table-column>
                    <el-table-column fixed="right" label="操作">
                        <template slot-scope="scope">
                            <el-button type="text" size="small" @click="onUpdate(scope.row)">编辑</el-button>
                            <el-button type="text" size="small" @click="ondelete(scope.row)">删除</el-button>
                        </template>
                    </el-table-column>
                </el-table>
                <div class="pu-pagination">
                    <el-pagination @size-change="handleSizeChange" @current-change="handleCurrentChange" :current-page="pagination.page" :page-sizes="[1, 10, 20, 30, 50]" :page-size="pagination.size"
                        layout="total, sizes, prev, pager, next, jumper" :total="pagination.totalCount" size="mini">
                    </el-pagination>
                </div>
            </el-tab-pane>


            <el-tab-pane name="createform">
                <span slot="label"><i class="el-icon-s-home"></i>创建</span>
                <el-form ref="formCreateRef" :model="form" :rules="formRules" label-width="120px" size="small">
                    <el-form-item label="名称" prop="title">
                        <el-input v-model="form.title" maxlength="64" class="width-500" show-word-limit></el-input>
                    </el-form-item>
                    <el-form-item label="路径">
                        <el-input v-model="form.path" maxlength="255" class="width-500" show-word-limit></el-input>
                    </el-form-item>
                    <el-form-item label="是否CDN模式">
                        <el-select v-model="form.isCdn" placeholder="请选择" class="width-500">
                            <el-option label="是" value="0"></el-option>
                            <el-option label="否" value="1"></el-option>
                        </el-select>
                    </el-form-item>
                    <el-form-item label="备注">
                        <el-input type="textarea" v-model="form.remarks" maxlength="255" class="width-500" show-word-limit></el-input>
                    </el-form-item>
                    <el-form-item>
                        <el-button type="primary" @click="onCreateFormSubmit">立即创建</el-button>
                        <el-button @click="activeName = 'list'">取消</el-button>
                    </el-form-item>
                </el-form>
            </el-tab-pane>


            <el-tab-pane name="edit">
                <span slot="label"><i class="el-icon-edit"></i>详情</span>
                <el-row>
                    <el-col>
                        <el-select v-model="selectTableName" placeholder="请选择" size="small">
                            <el-option v-for="item in databaseTableList" :key="item.table_name" :label="item.table_name" :value="item.table_name">
                            </el-option>
                        </el-select>
                        <el-button type="primary" size="small" @click="onQueryTableFields">创建数据</el-button>
                    </el-col>
                </el-row>
                <el-card class="box-card">
                    <el-row>
                        <el-col>
                            <el-checkbox :indeterminate="isIndeterminate" v-model="checkAll" @change="handleCheckAllChange">
                                全选</el-checkbox>
                            <div style="margin: 15px 0;"></div>
                            <el-checkbox-group v-model="checkedCities" @change="handleCheckedCitiesChange">
                                <el-checkbox v-for="item in handleGroup" :label="item.value" :key="item.value">
                                    {{item.label}}</el-checkbox>
                            </el-checkbox-group>
                        </el-col>
                    </el-row>
                </el-card>
                <el-row>
                    <el-col>
                        <el-form ref="formDataRef" :model="formTableData" size="mini">
                            <el-table border :data="formTableData.databaseFieldList" style="width: 100%">
                                <el-table-column type="index" label="序号" align="center" width="70"></el-table-column>
                                <el-table-column prop="field" label="字段" width="180"></el-table-column>
                                <el-table-column prop="comment" label="标题" width="180">
                                    <template slot-scope="scope">
                                        <el-input v-model="scope.row.comment" size="mini"></el-input>
                                    </template>
                                </el-table-column>

                                <el-table-column label="可空" width="50">
                                    <template slot-scope="scope">
                                        <el-checkbox v-model="scope.row.isNull"></el-checkbox>
                                    </template>
                                </el-table-column>
                                <el-table-column label="查询" width="50">
                                    <template slot-scope="scope">
                                        <el-checkbox v-model="scope.row.isQuery"></el-checkbox>
                                    </template>
                                </el-table-column>
                                <el-table-column label="隐藏" width="50">
                                    <template slot-scope="scope">
                                        <el-checkbox v-model="scope.row.isHidden"></el-checkbox>
                                    </template>
                                </el-table-column>
                                <el-table-column label="只读" width="50">
                                    <template slot-scope="scope">
                                        <el-checkbox v-model="scope.row.isReadOnly"></el-checkbox>
                                    </template>
                                </el-table-column>
                                <el-table-column label="组件" width="180">
                                    <template slot-scope="scope">
                                        <el-select v-model="scope.row.componentName" size="mini">
                                            <el-option v-for="item in componentsList" :key="item.value" :label="item.label" :value="item.value"></el-option>
                                        </el-select>
                                    </template>
                                </el-table-column>
                                <el-table-column label="枚举KEY" width="180">
                                    <template slot-scope="scope">
                                        <el-input v-model="scope.row.componentKey" size="mini"></el-input>
                                    </template>
                                </el-table-column>
                            </el-table>
                        </el-form>
                    </el-col>
                </el-row>
                <div class="pu-pagination">
                    <el-button type="primary" @click="onSaveTable">保存并生成数据</el-button>
                </div>
            </el-tab-pane>
        </el-tabs>
    </div>
</body>
<%include include/js.ejs%>

<script>
    var components = [{
        label: 'el-input',
        value: 'el-input'
    }, {
        label: 'el-select',
        value: 'el-select'
    }, ]
    new Vue({
        el: '#app',
        data: function () {
            return {
                api: '<%= api %>',
                /* list */
                activeName: 'list',
                QueryParam: {},
                tableData: [],
                pagination: {
                    page: 1,
                    size: 10,
                    totalCount: 0
                },
                multipleSelection: [],
                /* create-form */
                form: {},
                formRules: {
                    title: [{
                        required: true,
                        message: '请输入名称',
                        trigger: 'blur'
                    }, ]
                },

                /* generate-form */
                databaseTableList: [], // 数据库表列表信息
                selectTableName: '', // 选中的表名 

                checkAll: false,
                checkedCities: [],
                handleGroup: [{
                    label: '上海',
                    value: '1'
                }],
                isIndeterminate: true,


                formTableData: {
                    databaseFieldList: [], // 数据库表字段信息
                    rules: {},
                },



                /* 引入数据 */
                componentsList: components,
            }
        },
        created() {
            this.tableQuery();
            this.initPanel();

        },
        /* on 自己写   handle 使用element中的方法 */
        methods: {
            /* 更改tab */
            onChangeTab(tab, event) {
                if (tab.name == 'list') {
                    this.tableQuery();
                } else if (tab.name == 'createform') {
                    this.onAdd();
                } else if (tab.name == 'edit') {
                    this.initPanel();
                }
            },
            /* 
             *   列表            
             */
            tableQuery(flag) {
                if (flag == 1) this.pagination.page = 1; // 查询时，让页面等于1
                let param = {
                    ...this.pagination,
                    ...this.QueryParam,
                };

                let _this = this;
                axios.post(this.api + '/list', param).then(function (res) {
                    _this.tableData = res.data.data.list;
                    _this.pagination = res.data.data.paging;
                }).catch(function (error) {
                    console.log(error);
                });
            },
            /* 改变每页大小 */
            handleSizeChange(val) {
                this.pagination.size = val;
                this.tableQuery();
            },
            /* 改变当前页 */
            handleCurrentChange(val) {
                this.pagination.page = val;
                this.tableQuery();
            },
            /* 多选获取值 */
            handleSelectionChange(val) {
                this.multipleSelection = val;
            },

            /* 
             *   新增与修改
             */
            /* 新增 */
            onAdd() {
                this.activeName = 'createform';
                this.form = {
                    isCdn: '1'
                }
            },
            /* 修改 */
            onUpdate(row) {
                this.activeName = 'createform';
                this.form = row;
            },
            /* 保存表单 */
            onCreateFormSubmit() {
                var _this = this;

                this.$refs.formCreateRef.validate((valid) => {
                    if (valid) {
                        axios.post(this.api + '/edit', _this.form).then(function (res) {
                            console.log(res);
                            _this.$message.success('保存成功');
                            _this.tableQuery();
                            _this.activeName = 'list';
                        }).catch(function (error) {
                            _this.$message.error(error);
                        })
                    } else {
                        console.log('error submit!!');
                        return false;
                    }
                });


            },
            /* 删除 */
            ondelete(row) {
                this.confirmDelete(row.id);
            },
            /* 多选删除 */
            onMultipleSelectionDel() {
                let idList = this.multipleSelection.map(function (item) {
                    return item.id;
                })
                this.confirmDelete(idList);
            },
            /* 删除 */
            confirmDelete(id) {
                let _this = this;
                this.$confirm("此操作将永久删除该信息, 是否继续?", "提示", {
                    confirmButtonText: "确定",
                    cancelButtonText: "取消",
                    type: "error"
                }).then(() => {
                    axios.post(_this.api + '/delete', {
                        id: id
                    }).then(function (res) {
                        _this.tableQuery();
                        console.log(res);
                    }).catch(function (err) {
                        console.log(err);
                    })
                })
            },


            /* 
             *       查询生成表单数据
             **/
            /* 查询数据库中的表信息 */
            initPanel() {
                var _this = this;
                axios.post(this.api + '/tableSchema').then(function (res) {
                    _this.databaseTableList = res.data.data;
                })
            },
            /* 查询数据表中的字段信息 */
            onQueryTableFields() {
                if (!this.selectTableName) {
                    this.$message.info('请选择数据库表名');
                    return false;
                }
                var _this = this;
                axios.post(this.api + '/queryTableFields', {
                    tableName: this.selectTableName
                }).then(function (res) {
                    _this.onMatchFiles(res.data.data);
                })
            },
            /* 跟据数据库的字段信息，匹配对应对应需要的数据 */
            onMatchFiles(data) {
                console.log(data, '-----');
                let arr = data.map(function (item) {
                    return {
                        field: item.Field,
                        comment: item.Comment,
                        isNull: item.Null == 'YES' ? true : false,
                        query: true,
                        isQuery: false,
                        isHidden: false,
                        isHidden: false,
                        componentName: '',
                        componentKey: '',
                    }
                })
                console.log(arr);
                this.$set(this.formTableData, 'databaseFieldList', arr);

            },

            /* 保存数据并生成表单 */
            onSaveTable() {
                console.log(this.formTableData.databaseFieldList);
            },







            /* 基本不改 */
            /* 操作功能点  全选*/
            handleCheckAllChange(val) {
                this.checkedCities = val ? this.handleGroup.map(function (item) {
                    return item.value
                }) : [];
                this.isIndeterminate = false;
            },
            /* 操作组更改 */
            handleCheckedCitiesChange(value) {
                let checkedCount = value.length;
                this.checkAll = checkedCount === this.handleGroup.length;
                this.isIndeterminate = checkedCount > 0 && checkedCount < this.handleGroup.length;
            },
        }
    })
</script>

</html>