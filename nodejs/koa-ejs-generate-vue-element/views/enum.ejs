<!DOCTYPE html>
<html lang="en">

<%include include/head.ejs%>

<body>
    <div id="app" v-cloak>
        <el-tabs v-model="activeName" type="border-card" @tab-click="onChangeTab">
            <el-tab-pane label="列表" name="list" size="mini">

                <el-form :inline="true" :model="formInline" class="demo-form-inline" size="mini">

                    <el-form-item label="所属组">
                        <el-select v-model="formInline.group" clearable placeholder="请选择">
                            <el-option v-for="(item, i) in groupKey" :key="'s' + item.group" :label="item.group" :value="item.group"></el-option>
                        </el-select>
                    </el-form-item>
                    <el-form-item>
                        <el-button type="primary" @click="tableQuery(1)">查询</el-button>
                        <el-button type="primary" @click="onAdd">新增</el-button>
                    </el-form-item>
                </el-form>

                <el-table :data="tableData" style="width: 100%" :style="{height:tableHeight}">
                    <el-table-column prop="group" label="所属组"> </el-table-column>
                    <el-table-column prop="title" label="标题"> </el-table-column>
                    <el-table-column prop="value" label="值"> </el-table-column>
                    <el-table-column fixed="right" label="操作" width="100">
                        <template slot-scope="scope">
                            <el-button @click="onEdit(scope.row)" type="text" size="small">查看</el-button>
                            <el-button type="text" size="small" @click="onDelete(scope.row)">删除</el-button>
                        </template>
                    </el-table-column>
                </el-table>
                <div class="pu-pagination">
                    <el-pagination @size-change="handleSizeChange" @current-change="handleCurrentChange" :current-page="pagination.page" :page-sizes="[1, 10, 20, 30, 50]" :page-size="pagination.size"
                        layout="total, sizes, prev, pager, next, jumper" :total="pagination.totalCount" size="mini">
                    </el-pagination>
                </div>
            </el-tab-pane>
            <el-tab-pane label="编辑" name="edit">
                <el-form ref="form" :model="form" label-width="140px" size="mini" style="width:600px" :style="{height:formHeight}">
                    <el-form-item label="所属组Key：">
                        <el-autocomplete value-key="group" v-model="form.group" :fetch-suggestions="querySearch" placeholder="请输入内容"></el-autocomplete>
                    </el-form-item>
                    <el-form-item label="标题：">
                        <el-input v-model="form.title"></el-input>
                    </el-form-item>
                    <el-form-item label="值：">
                        <el-input v-model="form.value"></el-input>
                    </el-form-item>
                    <el-form-item>
                        <el-button type="primary" @click="onSubmit">保存</el-button>
                        <el-button @click="activeName = 'list'">取消</el-button>
                    </el-form-item>
                </el-form>
            </el-tab-pane>
        </el-tabs>


    </div>
</body>
<%include include/js.ejs%>


<script>
    function getHeight(value) {
        return document.documentElement.clientHeight - value + 'px';
    }
    new Vue({
        el: '#app',
        data: function () {
            return {
                api: '<%= api %>',
                tableHeight: getHeight(200), // 页面高度
                formHeight: getHeight(114),
                formInline: {
                    group: ''
                },

                activeName: 'list',

                tableData: [], // 列表
                pagination: {
                    page: 1,
                    size: 10,
                    totalCount: 0
                }, // 分布 
                form: {}, //编辑 
                groupKey: [],
            }
        },
        created() {
            this.tableQuery();
            this.queryGroupkey();

        },
        methods: {

            /* 更改tab */
            onChangeTab(tab, event) {
                if (tab.name == 'list') {
                    this.tableQuery();
                } else if (tab.name == 'edit') {
                    this.onAdd();
                }
            },
            /* 改变每页大小 */
            handleSizeChange(val) {
                this.pagination.size = val;
                this.tableQuery();
            },
            /* 改变当前页 */
            handleCurrentChange(val) {
                this.pagination.page = val;
                this.tableQuery();
            },
            tableQuery(flag) {
                if (flag == 1) this.pagination.page = 1; // 查询时，让页面等于1
                let param = {
                    ...this.formInline,
                    ...this.pagination,
                    ...this.QueryParam,
                };

                let _this = this;
                axios.post(this.api + '/list', param).then(function (res) {
                    _this.tableData = res.data.data.list;
                    _this.pagination = res.data.data.paging;
                }).catch(function (error) {
                    console.log(error);
                });
            },
            onSubmit() {
                let _this = this;
                axios.post(this.api + '/edit', this.form).then(function (res) {
                    console.log(res);
                    _this.tableQuery();
                    _this.activeName = 'list';
                }).catch(function (error) {
                    console.log(error);
                });
            },
            /* 删除 */
            onDelete(row) {
                let _this = this;
                this.$confirm("此操作将永久删除该信息, 是否继续?", "提示", {
                    confirmButtonText: "确定",
                    cancelButtonText: "取消",
                    type: "error"
                }).then(() => {
                    axios.post(_this.api + '/delete', {
                        id: row.id
                    }).then(function (res) {
                        _this.tableQuery();
                        if (res.data.data > 1) {
                            _this.$message.success('删除成功');
                        }
                    }).catch(function (err) {
                        console.log(err);
                    })
                })
            },
            queryGroupkey() {
                let _this = this;
                axios.post(this.api + '/queryGroup', this.form).then(function (res) {
                    console.log(res);
                    _this.groupKey = res.data.data;
                }).catch(function (error) {
                    console.log(error);
                });
            },



            /* 编辑
             * *************************************
             */
            /* 新增 */
            onAdd() {
                this.activeName = 'edit';
                this.form = {}
            },
            onEdit(row) {
                this.activeName = 'edit';
                this.form = row;
            },
            /* 带输入建议 */
            querySearch(queryString, cb) {
                var restaurants = this.groupKey;
                var results = queryString ? restaurants.filter(this.createFilter(queryString)) : restaurants;
                // 调用 callback 返回建议列表的数据
                cb(results);
            },
            createFilter(queryString) {
                return (restaurant) => {
                    return (restaurant.group.toLowerCase().indexOf(queryString.toLowerCase()) === 0);
                };
            },
        }
    })
</script>

</html>